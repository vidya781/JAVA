Hash table:

Data Structure

A hash table organizes data so you can quickly look up values for a given key.

Strengths:
Fast lookups. Lookups take O(1)O(1) time on average.
Flexible keys. Most data types can be used for keys, as long as they're hashable.

      Average   WC
space   O(n)    O(n)
insert  O(1)    O(n)
lookup  O(1)    O(n)
delete  O(1)    O(n)

Weakness:

Slow worst-case lookups. 
Lookups take O(n)O(n) time in the worst case.

Unordered. 
Keys aren't stored in a special order.
 If you're looking for the smallest key, the largest key, or all the keys in a range, you'll need to look through every key to find it.

Single-directional lookups. 
While you can look up the value for a given key in O(1)O(1) time, looking up the keys for a given value requires looping through the whole dataset—O(n)O(n) time.


In Java, they are called HashMaps


  HashMap<String, Integer> lightBulbToHoursOfLight = new HashMap<>();

Hash maps
Arrays are pretty similar to hash maps already. Arrays let you quickly look up the value for a given "key" . . . except the keys are called "indices," and we don't get to pick them—they're always sequential integers (0, 1, 2, 3, etc).

Think of a hash map as a "hack" on top of an array to let us use flexible keys instead of being stuck with sequential integer "indices."

All we need is a function to convert a key into an array index (an integer). That function is called a hashing function.

To look up the value for a given key, we just run the key through our hashing function to get the index to go to in our underlying array to grab the value.

How does that hashing method work? There are a few different approaches, and they can get pretty complicated. But here's a simple proof of concept:

Grab the number value for each character and add those up :

l i e s

108 + 105 + 101 + 115 = 429

The result is 429 but if we have just 30 slots in the array? 
We take the above reuslta nd do mod (size ofarray) 
In this case 429mod30 = 9

Hashing methods used in modern systems can get pretty complicated.

Hash collision:

Its quite possible that 2 words could end up having teh sum adend number and hence the same slot

f o e s
102 + 111 + 101 + 115 = 429 and hence 429 mod 30 = 9
This is a definite collision.
One common solution is : Instead of storing the actual values in our array,
lets have each array slot hold a pointer to a Linked List holding the values fro all the keys that hash o that index

Notice that we included the keys as well as the values in each linked list node. Otherwise we wouldn't know which key was for which value!

Hash collisions
If all our keys caused hash collisions, we'd be at risk of having to walk through all of our values for a single lookup (in the example above, we'd have one big linked list). 
This is unlikely, but it could happen. That's the worst case.

Dynamic array resizing
Suppose we keep adding more items to our hash map. As the number of keys and values in our hash map exceeds the number of indices in the underlying array, hash collisions become inevitable.

To mitigate this, we could expand our underlying array whenever things start to get crowded. 
That requires allocating a larger array and rehashing all of our existing keys to figure out their new position—O(n)O(n) time.

lightBulbToHoursOfLight.put("incandescent", 1200);
lightBulbToHoursOfLight.put("compact fluorescent", 10000);
lightBulbToHoursOfLight.put("LED", 50000);
