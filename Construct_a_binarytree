Construct a binary tree from inorder and level order sequence

In order traversal : { 4,2,5,1,6,3,7}
Level order traversal : { 1,2,3,4,5,6,7}

Output:

Below Binary Tree

                   1
                  / \
                 2   3
               /  \  / \
              4   5  6  7
 Idea is to start with root node which would be the node with minimum index in level order sequence and partition the in order
 sequence for right and left subtree.To find the boundary of left and right subtree, search for index of root node in order 
 sequence.All keys before the root node in inorder sequence becomes part of the left subtree and all the keys after the root
 node becomes part of the right subtree. Repeat this recursively for all nodes in the tree and construct the tree in the process.
 
 Consider the following sequence:
 
 Left subtree {4,2,5}
 Root {1}
 Right subtree {6,3,7}
 
 Build the left and right subtrees and link them to the root node.
 
 Level Order {1,2,3,4,5,6,7} ( Level 0-- 1)
                             ( Level 1 -- 2,3)
                             ( Level 2 -- 4,5,6,7)
                             
 import java.util.HashMap;
import java.util.Map;

// Data structure to store a Binary Tree node
class Node {
	int data;
	Node left, right;

	Node(int data) {
		this.data = data;
	}
};

class Main
{
	// Recursive function to perform inorder traversal of a binary tree
	public static void inorderTraversal(Node root)
	{
		if (root == null) {
			return;
		}

		inorderTraversal(root.left);
		System.out.print(root.data + " ");
		inorderTraversal(root.right);
	}

	// Recursive function to construct a binary tree from in-order and
	// level-order traversals
	public static Node buildTree(int[] inorder, int start, int end,
								Map<Integer, Integer> map)
	{
		// base case
		if (start > end) {
			return null;
		}

		// find the index of root node in inorder[] to determine the
		// boundary of left and right subtree
		int index = start;
		for (int j = start + 1; j <= end; j++)
		{
			// find node with minimum index in level order traversal
			// That would be the root node of inorder[start, end]
			if (map.get(inorder[j]) < map.get(inorder[index])) {
				index = j;
			}
		}

		// construct the root node
		Node root = new Node(inorder[index]);

		// recursively construct the left subtree
		root.left = buildTree(inorder, start, index - 1, map);

		// recursively construct the right subtree
		root.right = buildTree(inorder, index + 1, end, map);

		// return root node
		return root;
	}

	// Construct a binary tree from in-order and level-order traversals
	public static Node buildTree(int[] in, int[] level)
	{
		// create a map to efficiently find index of an element in
		// level-order sequence
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < in.length; i++) {
			map.put(level[i], i);
		}

		// Construct the tree and return it
		return buildTree(in, 0, in.length - 1, map);
	}

	public static void main(String[] args)
	{
		int[] inorder = { 4, 2, 5, 1, 6, 3, 7 };
		int[] level	= { 1, 2, 3, 4, 5, 6, 7 };

		Node root = buildTree(inorder, level);

		System.out.print("Inorder traversal of the constructed tree: ");
		inorderTraversal(root);
	}
}
