Find duplicate rows present in the given binary matrix by traversing the matrix only once.

Approach/Idea:

Since only binary values are given the idea is to convert each row into decimal values and see if the decimal value already 
exists in the hash set.

This method will only work if N < 32 ( N = number of columns ) 

import java.util.HashSet;
import java.util.Set;

class Util
{
   public static void main( String[] args )
    {
       int M[][] = { {0,0,0,0,0},
                     {0,1,1,0,0},
                     {0,0,0,0,0},
                     {0,0,1,1,0},
                     {0,1,1,0,0}
                     };
       Set<Integer> set = new HashSet<>();
       
       // do for each row
       for(int i = 0; i < M.length; i++)
         {
            int decimal = 0;
            // COnvert binary row into its decimal equivalent
            
            for(int j = 0; j < M[i].length; j++) {
                decimal += M[i][j] * Math.pow(2,j);
            }
            
            // if decimal value is seen before
            if(set.contains(decimal)) {
                System.out.println(" duplicate row found : Row # " + (i + 1));
           }
           else
               {
                   set.add(decimal);
               }
             }
           }
         }
