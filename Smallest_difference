Given two arrays of integers , compute the pair of values ( one value in each array) with the smallest (non-negative) difference
and return the difference

Example:

Input : {1,3,15,11,2};
        {23,127,235,19,8}
        
# Unequal sized arrays

Output : 3 That is, the pair(11,8)

Solution:

Start with a BF solution always. The simple approach is just iterate through all pairs, compute the difference and compare it 
to the current minimum difference.

int findsmallestdifference(int[] array1, int[] array2) {
     if(array1.length == 0 || array2.length == 0) return -1;
     
     int min = Integer.MAX_VALUE;
     for(int i = 0; i < array1.length; i++) {
         for(int j = 0; j < array2.length; j++) {
              if(Math.abs(array1[i] - array2[j] < min) {
                   min = Math.abs(array1[i] - array2[j]);
          }
       }
    }
    return min;
 }
 
 One minor optimization we could possible perform from here is to return immediately if we find a difference of zero since 
 this is the smallest possible difference. However, depending on the input, this might be slower.
 
 This will be faster if there's a pair with difference zero early in the list of pairs. To add to this optimization, we need 
 to exercise additional line of code. This is faster for some inputs and slower for others.
 
 Algorithm will take O(AB) time.
 
 Optimality criterion:
 
 Sort the arrays. Find the minimum difference by iterating through the array.
 
 A : {1, 2, 11, 15}
 B : {4, 12, 19, 23, 127, 235}
 
 One could take the following approach :
 
 1) Make a pointer a point to the beginning of A and a pointer b point to the beginning of B. For the pair defined above,
    current difference between a and b is 3. Store this as min.
    
 2) How can we make this difference smaller? If pointer a moves to 2 and b remains at 4 then the difference is 2. Now a moves to 11
 but if b were to remain at 4 then abs(11-4) = 7 so move to 12 , now the difference is 1.So the pointer can be moved appropriately.
 
 int findsmallestdifference(int[] array1, int[] array2) {
     Arrays.sort(array1);
     Arrays.sort(array2);
     int a = 0;
     int b = 0;
     int difference = Integer.MAX_VALUE;
     while ( a < array1.length && b < array2.length) {
          if ( Math.abs(array1[a] - array2[b] < difference ) {
              difference = Math.abs(array1[a] - array2[b]);
           }
           / * Move smaller view. */
           if(array1[a] < array2[b]) {
               a++;
            } else {
               b++;
            }
         }
         return difference;
      }
      
      This takes O(AlogA + BlogB) time to sort and O(A+B) time to find the minimum difference.
      Therefore the overall runtime is O(AlogA + BlogB) as for larger arrays, the log values will significantly reduce the numerical
      value of the length.
      
      
 
