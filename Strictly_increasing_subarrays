Given an array, count the number of strictly increasing sub-arrays.

The problem statement is specifically regarding sub-arrays which are contiguous and inherently maintains the order of the elements.
A strictly increasing subarray has size of atleast 2.

Input: A[] = {1,2,4,4,5}
Output: The number of strictly increasing sub arrays is 4
        {1,2} , {1,2,4}, {2,4},{4,5}
        
Input: A[] = {1,3,2}
Output: The number of increasing sub-arrays is 1
    {1,3}
    
Input: A[] = {5,4,3,2,1}
Output: The number of increasing sub-arrays is 0

Approach/Idea: Generate all possible subarrays and check if they are increasing or not.TC O(n^3) since time spent on each 
subarray is O(n) and there are O(n^2) sub-arrays.

class Increasingsubarrays
{
   // Function to count the number of increasing sub-arrays in an array
   {
      // stores the count of increasing sub-arrays
      int count = 0;
      
      //consider all sub arrays arr[i,j] starting from index i and ending at j
      for(int i = 0; i < arr.length; i++)
      {
         for(int j = i + 1; j < arr.length; j++)
         {
            // the previous element must be less than the current element for a strictly increasing sequence
            if(arr[j-1] > arr[j])
            {
               // do not consider index from j + 1 onwards
                break;
            }
            // if the sub-array arr[i,j] is strictly increasing,increment the total count
            ++count;
            }
        }
        // return the count of strictly increasing sub arrays
        return count;
      }
      
    public static void main(String[] args)
    {
       int[] arr = { 1,2,4,4,5};
       System.out.print("The number of strictly increasing sub-arrays are " + getCount(arr));
    }
 }
 
 
       
   
