

Java prog to sort an array of integers in ascending order

import java.util.Arrays;

public class SortExample
{
   public static void main(String[] args)
    {
      int[] arr = {13,7,6,45,21,9,101,102};
      Arrays.sort(arr);
      System.out.printf("modified arr[] : %s",Arrays.toString(arr));
    }
}


Sorting in reverse order

import java.util.Arrays;
import java.util.Collections;

public class Sortinreverse
{
  public static void main(String[] args)
  {
    Integer[] arr = {13,7,6,45,21,9,2,100};
    Arrays.sort(arr,Collections.reverseOrder());
    System.out.printf("Modified arr[] : %s",Arrays.toString(arr));
   }
}

----------------------------------------

import java.util.Arrays;
import java.util.Collections;

public class SortExample
{
  public static void main(String[] args)
  {
    String arr[] - {"practice.gfg.org",
                    "quiz.gfg.org",
                    "code.gfg.org"
                     };
  
    Arrays.sort(arr);
    System.out.printf("Modified arr[]:\n%s\n\n",Arrays.toString(arr));
    Arrays.sort(arr,Collections.reverseOrder());
    System.out.printf("Modified arr[]:\n%s\n\n",Arrays.toString(arr));
   }
 }
------------------------------------------

//User defined criteria

import java.util.*;
import java.lang.*;
import java.io.*;

class Student
{
   int rollno;
   String name,address;

   public Student(int rollno,String name, String address)
   {
     this.rollno = rollno;
     this.name = name;
     this.address = address;
    }
  //Printing student details in main()
   public String toString()
   {
     return this.rollno + " " + this.name + this.address;
    }
}

class Sortbyroll implements Comparator<Student>
{
   //used for sorting in ascending order of roll number
  public int compare(Student a, Student b)
  {
    return a.rollno - b.rollno;
   }
}

//Driver class
class Main
{
  public static void main(String[] args)
   {
     Student[] arr = {new Student(111,"aaaaa","mumbai"),
                      new Student(131,"bbbb","kota")
                      new Student(121,"cccc","pune")};
     System.out.println("Unsorted");
     for(int i = 0; i < arr.length; i++)
         System.out.println(arr[i]);
     Arrays.sort(arr,new Sortbyroll());
     System.out.println("\nSorted by rollno");
     for(int i = 0; i <arr.length;i++)
         System.out.println(arr[i]);
     }
  }
-----------------------------------------------------------

import java.util.*;
public class Collectionsorting
{
   public static void main(String[] args)
    {
      //Create a list of strings
      ArrayList<String> a1 = new ArrayList<String>();
      a1.add("geeks incorporated");
      a1.add("add");
      a1.add("Dear");
      a1.add("Is");
      a1.add("Good");
  
      /*Collections.sort method is sorting the elements of Arraylist in ascending order.*/
     Collections.sort(a1);  /* Collections.sort(a1,Collections.reverseOrder());  for reversing the array
     
      // Printing the sorted list
     System.out.println("List after the use of" + "Collection.sort() :\n" + a1);
    }
}

------------------------
#### Parallelsort versus SerialSort


import java.util.Arrays;
public class Parallelsorttest
{
  private static final int BASE_ARRAY_SIZE = 10000;
    public static double[] generatearray(int size)
    {
      if(size <= 0 || size > Integer.MAX_VALUE)
          return null;
      double[] result = new double[size];
      for(int i = 0; i < size; i++)
          result[i] = Math.random();
      return result;
    }
   public static void main(String[] args)
   {
      for(int i = 1; i < 10000; i *= 10)
       {
          int size = BASE_ARRAY_SIZE * i;
          double[] arr1 = generateArray(size);
          double[] arr2 = Arrays.copyOf(arr1,arr1.length);
          System.out.println("Array size: " + size);

          // Sorting arr1[] using serial sort
          long startTime = System.currentTimeMillis();
           Arrays.sort(arr1);
           long endTime = System.currentTimeMillis();
           System.out.println("Time taken in serial : " + (endTime-startTime) + "ms.");

           // Sorting arr2[] using serial sort
          startTime = System.currentTimeinMillis();
          Arrays.parallelSort(arr2);
          endTime = System.currentTimeMillis();
          System.out.println("Time taken in parallel: " + (endTime-startTime) + "ms.");
          System.out.println();
         }
       }
     }
