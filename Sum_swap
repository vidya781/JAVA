Sum Swap:

Given two arrays of integers, find a pair of values(one value from each array) that you can swap to give two arrays the same sum.

Example

Input {4,1,2,1,1,2} and {3,6,3,3}
Output {1,3}

Solution:

Lets start by first trying to calculate the sum: 4 + 1 + 2 + 1 + 1 + 2 = 11
and 3 + 6 + 3 + 3 = 15 

Going by the output seen above, Remove 1 from the first array and replace by 3 to get {4,3,2,1,1,2} and {1,6,3,3} ( we just swapped a 1 with 3 and a 3 with 1 in the first and second arrays respectively)

The sum for array1 and array2 now becomes 13 and 13 respectively.

Now computing the sum is an O(N) operation and hence computing the sum will not impact the runtime anyway.

When we move a positive value a( assume the values are all positive for now) from array A to array B , then the sum of A drops by a and the sum of B increases by a.

Similarly if b is taken from array B, the sum reduces by b while sumA increases by b as it is transferred there.

Therefore we can summarise the operation as follows:

sumA – a + b = sumB – b + a

2a – 2b = sumA – sumB
a – b = (sumA-sumB)/2

Therefore we are looking for two values that have a specific target difference: (sumA-sumB)/2

Observe that because that the target must be an integer( cannot swap two integers to get a non integer difference) . Difference between the sums must be even to have a valid pair.

BF approach:

A BF algorithm is simple enough and we iterate through the arrays and check all the pairs of values.
Do this the “naive” way  for looking for  a pair with that difference.

Int[] findSwapValues(int[] array1, int[] array2){
   int sum1 = sum(array1);
   int sum2 = sum(array2);


   for(int one: array1) {
      for(int two: array2) {
        int newsum1 = sum1 – one + two;
        int newsum2 = sum2 – two + one;
        if(newsum1 == newsum2) {
            int[] values = {one, two};
            return values;
           } 
      }
  }
return null;
}

int[] findSwapValues(int[] array1, array2) {
      Integer target = gettarget(array1,array2);
      if(target == null) return null;

      for(int one: array1) {
          for(int two: array2) {
               if(one – two == target) {
                    int[] values = {one,two};
                     return values;
                 }
           }
     }
  return null;
}

# Now define the function gettarget

Integer getTarget(int[] array1, int[] array2){
      int sum1 = sum(array1);
      int sum2 = sum(array2);

      if((sum1 – sum2) % 2 != 0) return null;
      return (sum1 – sum2) / 2;
   }

Note that we have used an Integer(a boxed data type) as the return value for gettarget. This allows us to distinguish an “error” case and this algorithm takes O(AB) time.

Defining optimality

The basic problem is that of finding a pair of values that have  a specific difference.
In the BF approach, we are looping through A and then for each element, looking for an element in B which gives us the “right” differeence. If the value in A is 5, and the taregt is 3, we must be looking for 2. This is the only value that could fulfil the goal.

We can write :   one – two == target or two == one – target. Can we quickly find an element in B that equals one  - target?

The approach would be to use a hash table. Throw all elements in B into a hash table. Iterate through A and look for the appropriate element in B.

Int[] findswapvalues(int[] array1, int[] array2) {
     Integer target = getTarget(array1,array2);
     if (target==null) return null;
      return finddifference(array1, array2, target);
}

/*Find a pair of values with a specific difference. */

int[] finddifference(int[] array1, int[] array2, int target){
       Hashset<Integer> contents = getcontents(array2);
       for(int one : array1) {
           int two = one – target;
            if(contents2.contains(two)) {
                 int[] values = {one, two};
                  return values;
            }
     }
return null;
}
* Put contents of array into hash set.*
Hashset<Integer> getcontents(int[] array) {
     Hashset<Integer> set = new HashSet<Integer>();
      for(int a : array) {
          set.add(a);
      }
    return set;
}

The solution will take O(A + B) time, this being the BCR ( best conceivable runtime)




