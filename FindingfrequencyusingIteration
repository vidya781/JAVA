Given a sorted array containing duplicates, efficiently find frequency of each element in it without 
traversing the whole array

Input: [2,2,2,4,4,4,5,5,6,8,8,9]

2 occurs 3 times
4 occurs 3 times
5 occurs 2 times
6 occurs 1 times
8 occurs 2 times
9 occurs 1 times

Recursive vs linear 

O(mlogn)      O(n) 

Input is sorted and there are dups present. Here m is the number of distinct elements
in the array and n is the size of the input. The idea is to simply split the arrray to 2 equal halves
and recurse for both halves.The base condition checks if the last element of the sub array is same as the first element
If they are equal, then it implies that all elements in the sub array are similar, ( since the array is sorted) and we update the element count by number of elements 
in the sub array(in constant time)

import java.util.HashMap;
import java.util.Map;

class FrequencyMap
{
  // Function to find frequency of each element in a sorted array
    public static void findFrequency(int[] A, int left, int right, Map<Integer, Integer> freq)
    
    {
       if (left > right) {
           return;
        }

    // if every element in the sub array A[left...right] is equal, then increment the element count by n
    if(A[left] == A[right])
    {
       Integer count = freq.get(A[left]);
       if(count == null){
          count = 0;
       }
      freq.put(A[left], count + (right - left + 1));
      return;
  }
   int mid = (left + right)/2;

   // divide array into left and right sub array and recurse
   findfrequency(A, left, mid, freq);
   findfrequency(A, mid + 1, right, freq);
  }

 public static void main(String[] args)
  {
    int[] A = {2,2,2,4,4,4,5,5,6,8,8,9};
    // find frequency of each element of the array and store it in map

   Map<Integer, Integer> freq = new HashMap<>();
   findFrequency(A, 0, A.length-1, freq);
   System.out.println(freq);
   }
}

