Given a polynomial of the form cnxn + cn-1xn-1 + cn-2xn-2 + â€¦ + c1x + c0 and a value of x, find the value of polynomial for a given 
value of x. Here cn, cn-1, .. are integers (may be negative) and n is a positive integer.

Input is in the form of an array say poly[] where poly[0] represents coefficient for xn and poly[1] represents coefficient for xn-1 and
so on.

// Evaluate the value of the expression : 3x^3 + 20x^2 -12x + 4
Input: poly[] = {3,20,-12,4}, x = 3
Output: 229

A naive method to evaluate a polynomial is to one by one evaluate all the terms.Calculate x^n, multiply the value with cn, repeat the
same for other terms and return the sum. Time complexity of this step is O(n^2) if we use a loop for evaluation of x^n. TC can be improved
to O(nlogn) if we use O(logn) approach for the evaluation of x^n.

We now resort to using Horner's method to evaluate the polynomial in O(n) time. Take a simple example of 2x^3-6x^2+2x-1.The polynomial
is ((2x-6)+2)x - 1.The idea is to initialize result as coefficient of x^n which is 2 in this case, repeatedly multiply the result with x
and add the next coefficient to result.Then eventually return result.

// Java program for evaluation the value of a polynomial using Horner's method

import java.io.*;
class HornerPolynomial
{
   // Function that returns value of poly[0]x(n-1) + 
    // poly[1]x(n-2) + .. + poly[n-1]
    
    static int horner(int poly[], int n, int x)
    {
       //initialize result
       int result = poly[0];
       
       // evaluate value of polynomial using Horner's method
       for(int i = 1; i < n; i++)
           result = result * x + poly[i];
           
           return result;
       }
       
   // driver program
   
   public static void main(String[] args)
   {
      // evaluate the value of x^2 + 20x + 12 for x = 4
      int[] poly = {1,20,12};
      int x = 4;
      int n = poly.length;
      System.out.println("Value of polynomial is" + horner(poly,n,x));
      }
   }     // careful with notation here: we are evaluating x^2 + 20x + 12 and not n^2 + 20n + 12 as in S(n), the statement of the problem
   
   TC : O(n)
      
      
      
