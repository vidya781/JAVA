Given an array of integers, find the longest subsequence formed by the consecutive integers.Unlike subarrays, subsequence are not 
required to occupy consecutive positions within the original sequence.

For example, consider the array { 2, 0 , 6 , 1 , 5 , 3 , 7 } and the largest subsequence formed is { 2 , 0 , 1 , 3 }

Naive solution is to sort the array in ascending array and compare the consecutive elements to find the maximum length subarray 
with consecutive integers. The time complexity in this case would be O(nlogn).

Use Hashing for a better solution. Consider each element of the input sequence and find the maximum length consecutive subsequence 
starting with it. For every element e, we check for presence of elements e + 1, e + 2, e + 3 in the input . We can optimize the code
by using the set for constant time lookups to determine if the element is present in the input sequence or not.

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import java.util.stream.Collectors;
import java.util.stream.IntStream;

class Main
{
	// Function to find the length of largest subsequence formed by consecutive integers
	public static int findMaxLenSubSeq(int[] arr)
	{
		// construct a set out of input elements
		Set<Integer> S = IntStream.of(arr)	  // returns IntStream
								.boxed()
								.collect(Collectors.toSet());

		// initialize result by 1
		int maxLen = 1;
	
		// do for each element of the input sequence
		for (int e: arr)
		{
			// check if current element e is candidate for starting of a sequence
			// i.e. previous element (e - 1) don't exist in the set
			if (!S.contains(e - 1))
			{
				// len stores the length of subsequence starting with current element
				int len = 1;
	
				// check for presence of elements e+1, e+2, e+3.. e+len in the set
				while (S.contains(e + len)) {
					len++;
				}
	
				// update the result with the length of current consecutive subsequence
				maxLen = Math.max(maxLen, len);
			}
		}
	
		// return result
		return maxLen;
	}
	
	public static void main (String[] args)
	{
		int[] arr = { 2, 0, 6, 1, 5, 3, 7 };
	
		System.out.println("The length of maximum length consecutive subsequence is " + 
				findMaxLenSubSeq(arr));
	}
}

# Adapted from TDL.
