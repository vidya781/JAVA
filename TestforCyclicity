If in  alinked list, the next field of an element references one of the earlier nodes, then we have a cycle in the list.
How do we go about detecting a cycle in the linked list given the head, and return null if no cycle exists?

The length of the list is not known in advance.

Space not being a constraint, the simplest approach is to explore nodes via the next field starting from the head and storing the visited
nodes in a hash table--a cycle exists if and only if we visit a node already in the hash table. If no cycle exists, the search ends at
the tail ( often represented by having the next field set to null). O(n) space is the SC where n is the number of nodes in the list.

BF approach: No additional storage and does not modify the list is to traverse the list in two loops--the outer loop traverses the nodes
one-by-one, and the inner loop starts from the head, and traverses as many nodes as the outer loop has gone through so far. If the node
being visited by the outer loop is visited twice, then a cycle exists in the Linked list. ( If the outer loop encounters the end of the list, no
cycle exists). Approach has O(n^2) complexity.

How do we go about this problem in linear time?

Use a slow iterator and  a fast iterator to traverse the list. In each iteration, advance the slow iterator by one and the fast iterator by two. The list
will have a cycle only if the two operators meet. If the fast iterator jumps over the slow iterator, the slow iterator will equal the fats iterator in the next
step.

Now, assuming we have detected a cycle using the above method, we can find the start of the cycle by first calculating the cycle length C.
Once we know that there is  acycle in place and we have a node on it, we can compute the cycle length. To find the first node on the cycle, we use
two iterators, one of which is C ahead of the other. We can advance them in tandem,and when they meet, that node must be the first node on the cycle.

public static ListNode<Integer> hasCycle(ListNode<Integer> head) {
 ListNode<Integer> fast = head, slow = head;
 
 while(fast != null && fast.next != null){
   slow = slow.next;
   fast = fast.next.next;
   if(slow == fast) {
      // There is a cycle , so now calculate the cycle length
      int cycleLen = 0;
      do {
         ++cycleLen;
         fast = fast.next;
         } while (slow != fast);
         
         // Finds the start of the cycle
         ListNode<Integer> cycleLenAdvancedIter = head;
           // cycelLenAdvancedIter pointer advances cycleLen first
           while(cycleLen-- > 0){
             cycleLenAdvancedIter = cycleLenAdvancedIter.next;
           }
           ListNode<Integer> iter = head;
           // Both the iterators advance in tandem
           while(iter != cycleLenAdvancedIter) {
               iter = iter.next;
               cycleLenAdvancedIter = cycleLenAdvancedIter.next;
             }
             return iter;   // iter is the start of the cycle
          }
       }
       
       return null;  // no cycle in the list
    }
    
 If F is the number of nodes to the start of the cycle, C the number of nodes on teh cycle, and n be the total number of nodes. Then 
 the time complexity is O(F) + O(C) = O(n) - O(F) for both pointers to reach the cycle, and O(C0 for them to overlap once the slower 
 one enters the cycle.
 
 
