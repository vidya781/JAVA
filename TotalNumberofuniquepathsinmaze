Total number of unique paths in a maze from source to destination

Some points:

Positions in the maze will be either open / blocked with an obstacle.
The robot can only move to positions without obstacles and the solution 
is to find paths that are open.
Retracing the 1 or more cells back and forth is not considered a new path.

The set of all cells covered in a single path should be unique from other paths.

Valid moves for the robot are:

North(x,y)->(x-1,y)
West(x,y)->(x,y-1)
South(x,y)->(x+1,y)
East(x,y)->(x,y+1)

import java.util.Arrays;

class Paths
{
    private static final int N = 4;
   
    private static boolean isValidCell(int x, int y)
    {
      if( x < 0 || y < 0 || x >= N || y >= N)
          return false;
      return true;
    }

  private static int countpaths(int maze[][], int x, int y, boolean visited[][], int count)
   {
     // if destination(botton rightmost cell) is found, increment path count
     if(x == N-1 && y == N-1)
     {
       count++;
       return count;
      }

      // mark current cell as visited
       visited[x][y] = true;
      
      // if current cell is valid and open cell
      if isValidCell(x,y) && maze[x][y] == 1)
     {
       // go down (x,y)--->(x+1,y)
        if(x + 1 < N && !visited[x+1][y])
            count = countPaths(maze, x+1, y,visited, count);

      // go up (x,y)--->(x-1,y)
        if(x-1 >= 0 && !visited[x-1][y])
            count = countPaths(maze,x-1,y,visited,count);

      //go right (x,y) --->(x,y+1)
        if(y + 1 < N && !visited[x][y+1])
            count = countPaths(maze, x, y+1,visited,count);

       // go left (x,y)--->(x,y-1)
       if(y - 1 >= 0 && !visited[x][y-1])
            count = countPaths(maze,x,y-1,visited,count);
      }

   // backtrack from the current cell and remove it from the current path
      visited[x][y] = false;
      return count;
   }

public static void main(String[] args)
{
   int maze[][] = 
     {
       {1,1,1,1},
       {1,1,0,1},
       {0,1,0,1},
       {1,1,1,1}
   };

  // stores number of unique paths from source to destination
    int count = 0;

   // 2D matrix to keep track of cells involved in current path
    boolean[][] visited = new boolean[N][N];

    // start frm source cell(0,0)
    count = countPaths(maze,0,0,visited,count);

    System.out.println("Total number of unique pairs are " + count);
    }
}
