The objective of this program is to demonstrate the concept of Binary Search by two methods: by iteration and by recursion.

However a key fact to be kept in mind is that in order to employ Binary Search the array must already be sorted. 
If not, use Arrays.sort(arr) method in order to sort it.

class BinarySearch(int arr[], int first, int last, int key)
{
   int mid = (first + last)/2;
   
   while( first <= last)
   {
      if(arr[mid] < key)
      {
        first = mid + 1;
      }
      else if (arr[mid] == key)
      {
        System.out.println("Element is found at index: " + mid);
        break;
      } else {
         last = mid - 1;
        }
        
        mid = ( first + last)/2;
        
     }
     
     if ( first > last )
     {
       System.out.println(" Element is not found !");
     }
  }
  
  public static void main(String args[]) 
  {
    int arr[] = {10,20,30,40,50};
    int key = 30;
    int last = arr.length - 1;
    binarySearch(arr,0,last,key);
    }
  }
  
  We now explore Binary Search via recursion: 
  
  class BinarySearchRecursion
  {
    public static int BinarySearch(int arr[], int first, int last, int key)
    {
      if ( last >= first) 
      {
        int mid = first + (last - first) / 2;
        if(arr[mid] == key)
        {
          return mid;
        }
      if(arr[mid] > key)
      {
        return BinarySearch(arr, first, mid - 1,key);
      }   // Search in left subarray
      else 
      {
        return BinarySearch(arr, mid + 1, last,key);// search in right subarray
      }
   }
    return -1;
   }
 }
 
  public static void main(String args[]){  
        int arr[] = {10,20,30,40,50};  
        int key = 30;  
        int last=arr.length-1;  
        int result = binarySearch(arr,0,last,key);  
        if (result == -1)  
            System.out.println("Element is not found!");  
        else  
            System.out.println("Element is found at index: "+result);  
    }  
}  
   
        
