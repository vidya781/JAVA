This program demonstrates operations on a Stack

public class StackTest
 {
    public static void main( String[] args)
    {
       double[] doubleElements = { 1.1, 2.2, 3.3, 4.4, 5.5 };
       int[] integerElements = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
       
       //Create a <Stack> double and a Stack<Integer>
       Stack< Double > doubleStack = new Stack < Double >( 5 );
       Stack< Integer > integerStack = new Stack < Integer >( );
       
       // push elements of doubleElements onto doubleStack
       
       testpushDouble( doubleStack, doubleElements );
       testpopDouble( doubleStack ); // pop from Doublestack
       
       // push elements of integerElements onto integerStack
       
       testpushInteger( integerStack, integerElements );
       testpopInteger( integerStack );   // pop from integerStack
       
       // end main
     }
       
   // test push method with double stack
   
   private static void testpushDouble( Stack < Double > stack, double [] values)
   {
      System.out.println(" \n Pushing elements onto doubleStack ");
      
      // push elements to Stack
      
      for( double value : values )
        {
           System.out.printf( " %.1f ", value);
           Stack.push ( value ); // push onto doubleStack
         }
      } // end method testpushDouble
      
   // test pop method with double Stack
   
   private static void testpopdouble( Stack < Double > stack )
   {
      // pop elements from stack
      
      try 
         {
            System.out.println("\n Popping elements from double Stack ");
            
            double popValue; // stored element removed from stack
            
            // remove all elements from Stack
            while( true )
            {
               popValue = stack.pop();  // pop from doubleStack
               System.out.printf("%.1f ", popValue);
            }
         }  // end try
      catch ( EmptyStackException emptyStackException)
      {
         System.err.println();
         emptyStackException.printStackTrace();
       } // end catch EmptyStackException
    }  // end method testpopdouble
    
    // test push method with integer Stack
    
    private static void testPushInteger(
        Stack < Integer > stack, int[] values )
        {
           System.out.println( "\n Pushing elements onto IntegerStack ");
           
           // push elements to Stack
           for ( int value : values )
           {
              System.out.printf( " %d ", value);
              stack.push( value ); // push onto IntegerStack
           } // end for
         } // end method testPushInteger
    
  // test pop method with integer Stack
  
  private static void testPopInteger( Stack< Integer > stack)
  {
     // pop elements from the stack
     try 
      {
         System.out.println( " \n Popping elements from integerStack ");
         int popValue;  // store element removed from stack
         
         // remove all elements from stack
         while ( true )
          {
            popValue = stack.pop(); // pop from intStack
            System.out.printf( " %d ", popValue);
          }
        } // end try
      catch( EmptyStackException emptyStackException)
      {
        System.err.println();
        emptyStackException.printStackTrace();
      } //  end catch EmptyStackException
    } // end method testPopInteger
  } // end class StackTest
        
    
              
    
            
       
