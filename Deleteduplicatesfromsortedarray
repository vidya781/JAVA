How does one delete duplicates from a sorted array?

Consider an array like <2,3,5,5,7,11,11,11,13> and then after the agorithm is employed the expectation is that one gets <2,3,5,7,11,13>

How can we develop a program which takes as its input a sorted array and updates it so that all the suplicates have been removed
AND the remaining elements have been shifted left to fill the emptied indices. Return the number of valid entries. A further constraint
is that one cannot use the inbuilt library functions.

Let A be the array and n be its length. If O(n) space is additionally allowed , then the problem can be solved by iterating through 
the array A and recording values that have not appeared previously into a hash table. The hash table is basically used to determine if the
value is new. New values are written to a list. The list is then copied back to A.

The condition to test out then is:

Iterate through A, if A[i] == A[i+1], then shift all elements at and after i + 2 to the left by one. When all the entries are equal( the worst case scenario)
the number of shifts is (n-1)+ (n-2)+...+2+1 O(n)^2 where n is the length of the array.

The goal is to reduce the amount of shifting. Since the array is sorted, repeated elements must appear one after the another, so we do not need an
auxilary data structure to check if an element has appeared already. We move just one element,rather than an entire subarray.

Take a concrete example:

<2,3,5,5,7,11,11,11,13> when processing the A[3], we already have a 5 ( comapring A[3] with A[2]), we advance to A[4]. Since this is a new 
value, we move it to the first vacant entry, namely A[3]. The array is <2,3,5,7,7,11,11,11,13>, and the first entry which is vacant is A[4].
We now continue from A[5].

// Returns the number of valid entries after deletion

public static int deleteDuplicates(List<Integer> A){
 if(A.isEmpty()){
    return 0;
    }
 int writeIndex = 1;
 for(int i = 1; i < A.size(); ++i) {
    if(!A.get(writeIndex - 1).equals(A.get(i))){
      A.set(writeIndex++,A.get(i));
      }
    }
    return writeIndex;
  }
  
  Time Complexity is O(n) and the space complexity is O(1)
